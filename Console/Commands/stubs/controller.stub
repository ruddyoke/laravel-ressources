<?php

namespace DummyNamespace;

use Illuminate\Http\Request;
use DummyRootNamespaceHttp\Requests;
use DummyRootNamespaceHttp\Controllers\Controller;

use App\Repositories\DummyBaseNameRepository;
use App\Http\Requests\DummyBaseNameRequest;

class DummyClass extends Controller
{
	protected $nbrPerPage = 10;

    public function __construct(ServiceRepository $DummyBaseNameRepository)
    {
        // $this->middleware('auth', ['except' => 'index']);

        $this->modelRepository = $DummyBaseNameRepository;
        $this->base_name = (object)[
            'route'=>'DummyRouteBaseName.',//strtolower(str_plural('DummyBaseName'));
            'view' =>'DummyViewBaseName.'  //strtolower('DummyBaseName');
            ];

        $this->$fields = [];
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $rows = $this->modelRepository->getPaginate($this->nbrPerPage);
        $links_paginate = $models->setPath('')->render();
        $base_name =  $this->base_name;
        $fields = $this->$fields;
        return view($this->view_base_name.'list', compact('rows','fields','links_paginate','base_name'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        return view( $this->view_base_name.'create');
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \App\Http\Requests\DummyBaseNameRequest  $request
     * @return \Illuminate\Http\Response
     */
    public function store(DummyBaseNameRequest $request)
    {
        $inputs = array_merge($request->all(), [/* Additional value */]);
        $row = $this->modelRepository->store($inputs);

        return redirect(route($this->route_base_name.'list'));
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $row = $this->modelRepository->getById($id);
        $fields = $this->$fields;

        return view($this->view_base_name.'edit',compact('row'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $post = $this->model->findOrFail($id);

        if(isAjax($request)) return view($this->view_base_name.'edit-ajax',compact('post'));
        return view($this->view_base_name.'edit',compact('post'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        //
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
